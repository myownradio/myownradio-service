name: Build App Service
on:
  repository_dispatch:
    types:
      - build-app-service
jobs:
  main:
    name: Build
    runs-on: ubuntu-latest
    env:
      NAMESPACE: "myownradio"
      SERVICE_NAME: ${{ matrix.service_name }}
      IMAGE_TAG: ${{ github.event.client_payload.tag }}
      DOCKER_REGISTRY: ${{ secrets.DOCKER_REGISTRY }}
    strategy:
      matrix:
        service_name: ${{ github.event.client_payload.services }}
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Preflight
        run: '[ -f "app/services/${SERVICE_NAME}/Dockerfile" ] || (echo "Dockerfile not found" && exit 1)'
      - name: Build
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ${{ env.DOCKER_REGISTRY }}
          repository: ${{ env.NAMESPACE }}/${{ env.SERVICE_NAME }}
          path: app
          dockerfile: app/services/${{ env.SERVICE_NAME }}/Dockerfile
          tags: ${{ env.IMAGE_TAG }},latest
  patch:
    name: Patch
    needs: main
    runs-on: ubuntu-latest
    env:
      NAMESPACE: ${{ needs.main.env.NAMESPACE }}
      IMAGE_TAG: ${{ needs.main.env.IMAGE_TAG }}
      DOCKER_REGISTRY: ${{ needs.main.env.DOCKER_REGISTRY }}
      SERVICES_LIST: ${{ join(github.event.client_payload.services, ' ') }}
    steps:
      - name: Create Patch
        id: patch_expression
        run: |
          PATCH_EXPRESSION=$(echo $(for SERVICE in ${SERVICES_LIST}; do
            echo services.${SERVICE}.image=${DOCKER_REGISTRY}/${NAMESPACE}/${SERVICE}:${IMAGE_TAG};
          done))
          echo "##[set-output name=patch_expression;]$(echo ${PATCH_EXPRESSION})"
      - name: Apply Patch
        uses: pldin601/patch-yaml-through-commit@master
        with:
          git_repo_url: https://pldin601:${{ secrets.GIT_PUSH_TOKEN }}@github.com/myownradio/myownradio-env.git
          commit_message: "Update services images: ${{ join(github.event.client_payload.services, ',') }}"
          yaml_file: swarm/docker-compose.yml
          patch_expression: ${{ steps.patch_expression.outputs.patch_expression }}

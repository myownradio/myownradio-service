name: 'Deploy'

on:
  push:
    branches: [ master, ecr ]

jobs:
  init:
    name: Run linter and tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Lint
        run: make run-linter
      - name: Tests
        run: make run-tests
  build:
    needs: init
    name: Build images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Build service images
        run: make build-all-services
      - name: Build application images
        run: make build-all-apps
  terraform:
    needs: init
    name: Terraform
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
      TF_VAR_cloudflare_token: ${{ secrets.CLOUDFLARE_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Terraform Init
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: 'terraform'
      - name: Terraform Apply
        id: 'terraform'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: 'terraform'
      - name: Upload terraform artifacts
        uses: actions/upload-artifact@v1
        with:
          name: tf
          path: terraform/.terraform
  push:
    name: Push images
    needs: [ build, terraform ]
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
      TF_VAR_cloudflare_token: ${{ secrets.CLOUDFLARE_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: chrislennon/action-aws-cli@v1.1
      - name: Checkout
        uses: actions/checkout@master
      - name: Download terraform artifacts
        uses: actions/download-artifact@v1
        with:
          name: tf
          path: terraform/.terraform
      - name: Authenticate Docker on AWS
        run: aws ecr get-login --no-include-email --region eu-central-1 | sh
      - name: Push images
        run: make push-all
  deploy:
    name: Deploy to Production
    needs: push
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
      TF_VAR_cloudflare_token: ${{ secrets.CLOUDFLARE_TOKEN }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: chrislennon/action-aws-cli@v1.1
      - name: Checkout
        uses: actions/checkout@master
      - name: Download terraform artifacts
        uses: actions/download-artifact@v1
        with:
          name: tf
          path: terraform/.terraform
      - name: Gather terraform output
        id: terraform_output
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'output'
          tf_actions_working_dir: 'terraform'
      - name: Parse terraform output
        id: parse_output
        uses: gr2m/get-json-paths-action@v1.x
        with:
          json: ${{ steps.terraform_output.outputs.tf_actions_output }}
          ssh_private_key: 'deployer_private_key.value'
          ssh_public_key: 'deployer_public_key.value'
          ip_address: 'mor_master_ip_address.value'
          frontend_image: 'frontend_image_url.value'
      - name: Deploy stack to Production
        uses: pldin601/docker-swarm-deploy-action@master
        with:
          remote_host: ssh://deployer@${{ steps.parse_output.outputs.ip_address }}
          ssh_private_key: ${{ steps.parse_output.outputs.ssh_private_key }}
          ssh_public_key: ${{ steps.parse_output.outputs.ssh_public_key }}
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          args: stack deploy --with-registry-auth --compose-file docker-compose.prod.yml mor
        env:
          FRONTEND_IMAGE_URL: ${{ steps.parse_output.outputs.frontend_image }}
          IMAGE_TAG: ${{ github.sha }}

name: 'Deploy'

on:
  pull_request:
    types:
      - closed

jobs:
  init:
    if: github.event.pull_request.merged == true && github.event.pull_request.base.ref == 'master'
    name: Run linter and tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Setup
        run: |
          sudo snap install terraform
          make setup-services
      - name: Linter
        run: make run-linter
      - name: Tests
        run: make run-tests

  terraform:
    needs: init
    name: Terraform
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
      TF_VAR_cloudflare_token: ${{ secrets.CLOUDFLARE_TOKEN }}
      TF_VAR_deploy_ip_address: ${{ secrets.SSH_IP_ADDRESS }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Terraform Init
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: 'terraform'
      - name: Terraform Apply
        id: 'terraform'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.12.20
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: 'terraform'

  build-frontend-proxy:
    needs: terraform
    name: Build "frontend-proxy" image
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SERVICE: frontend-proxy
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Build myownradio/frontend-proxy
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ${{ secrets.DOCKER_REGISTRY }}
          repository: myownradio/frontend-proxy
          path: services/frontend-proxy
          tags: ${{ github.sha }},latest

  build-radiomanager-frontend:
    needs: terraform
    name: Build "radiomanager-frontend" image
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SERVICE: radiomanager-frontend
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Build myownradio/radiomanager-frontend
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ${{ secrets.DOCKER_REGISTRY }}
          repository: myownradio/radiomanager-frontend
          path: app
          dockerfile: app/services/radiomanager-frontend/Dockerfile
          tags: ${{ github.sha }},latest

  build-radiomanager-backend:
    needs: terraform
    name: Build "radiomanager-backend" image
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SERVICE: radiomanager-backend
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Build myownradio/radiomanager-backend
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ${{ secrets.DOCKER_REGISTRY }}
          repository: myownradio/radiomanager-backend
          path: app
          dockerfile: app/services/radiomanager-backend/Dockerfile
          tags: ${{ github.sha }},latest

  build-migration:
    needs: terraform
    name: Build "migration" image
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SERVICE: migration
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Build myownradio/migration
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ${{ secrets.DOCKER_REGISTRY }}
          repository: myownradio/migration
          path: app
          dockerfile: app/services/migration/Dockerfile
          tags: latest


  build-auth-server:
    needs: terraform
    name: Build "auth-server" image
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SERVICE: auth-server
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Build myownradio/auth-server
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ${{ secrets.DOCKER_REGISTRY }}
          repository: myownradio/auth-server
          path: app
          dockerfile: app/services/auth-server/Dockerfile
          tags: ${{ github.sha }},latest

  build-fileserver-local:
    needs: terraform
    name: Build "fileserver-local" image
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SERVICE: fileserver-local
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Build myownradio/fileserver-local
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ${{ secrets.DOCKER_REGISTRY }}
          repository: myownradio/fileserver-local
          path: app
          dockerfile: app/services/fileserver-local/Dockerfile
          tags: ${{ github.sha }},latest

  build-audio-uploader:
    needs: terraform
    name: Build "audio-uploader" image
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SERVICE: audio-uploader
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Build myownradio/audio-uploader
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ${{ secrets.DOCKER_REGISTRY }}
          repository: myownradio/audio-uploader
          path: app
          dockerfile: app/services/audio-uploader/Dockerfile
          tags: ${{ github.sha }},latest

  build-stream-composer:
    needs: terraform
    name: Build "stream-composer" image
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SERVICE: stream-composer
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Build myownradio/stream-composer
        uses: docker/build-push-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          registry: ${{ secrets.DOCKER_REGISTRY }}
          repository: myownradio/stream-composer
          path: app
          dockerfile: app/services/stream-composer/Dockerfile
          tags: ${{ github.sha }},latest

  deploy:
    name: Deploy to Production
    needs:
      - terraform
      - build-frontend-proxy
      - build-radiomanager-frontend
      - build-radiomanager-backend
      - build-migration
      - build-auth-server
      - build-fileserver-local
      - build-audio-uploader
      - build-stream-composer
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_do_token: ${{ secrets.DO_TOKEN }}
      TF_VAR_cloudflare_token: ${{ secrets.CLOUDFLARE_TOKEN }}
      TF_VAR_deploy_ip_address: ${{ secrets.SSH_IP_ADDRESS }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout
        uses: actions/checkout@master
      - name: Deploy stack to Production
        uses: pldin601/docker-swarm-deploy-action@master
        with:
          remote_host: ssh://${{ secrets.SSH_USER }}@${{ secrets.SSH_IP_ADDRESS }}
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
          ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
          docker_username: ${{ secrets.DOCKER_USERNAME }}
          docker_password: ${{ secrets.DOCKER_PASSWORD }}
          docker_registry: ${{ secrets.DOCKER_REGISTRY }}
          args: stack deploy --with-registry-auth --compose-file myownradio-service/docker-compose.prod.yml mor
        env:
          IMAGE_TAG: ${{ github.sha }}

          # images here
          RADIOMANAGER_FRONTEND_IMAGE_URL: ${{ secrets.DOCKER_REGISTRY }}/myownradio/radiomanager-frontend
          RADIOMANAGER_BACKEND_IMAGE_URL: ${{ secrets.DOCKER_REGISTRY }}/myownradio/radiomanager-backend
          FRONTEND_PROXY_IMAGE_URL: ${{ secrets.DOCKER_REGISTRY }}/myownradio/frontend-proxy
          MIGRATION_IMAGE_URL: ${{ secrets.DOCKER_REGISTRY }}/myownradio/migration
          AUTH_SERVER_IMAGE_URL: ${{ secrets.DOCKER_REGISTRY }}/myownradio/auth-server
          FILESERVER_LOCAL_IMAGE_URL: ${{ secrets.DOCKER_REGISTRY }}/myownradio/fileserver-local
          AUDIO_UPLOADER_IMAGE_URL: ${{ secrets.DOCKER_REGISTRY }}/myownradio/audio-uploader
          STREAM_COMPOSER_IMAGE_URL: ${{ secrets.DOCKER_REGISTRY }}/myownradio/stream-composer
          # end of images
